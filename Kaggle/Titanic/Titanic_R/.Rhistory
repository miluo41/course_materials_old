na.action = na.pass)
training_f
str(training_f)
tmp<-training_f[complete.cases(training_f),]
svm.fit<-train(Survived ~.,tmp,
method='lda',
trControl = ctrl,
na.action = na.pass)
sapply(training_f,function(x) mean(is.na(x)))
training_f$Age
na_to_zero<-function(x){
x2<-x[is.na(x)]<-0
x2
}
lapply
?lapply
na_to_zero<-function(x){
if (class(x)==numeric){
x2<-x[is.na(x)]<-0
return(x2)}
else{
return(x)
}
}
lapply(trainging_f,na_to_zero)
na_to_zero<-function(x){
if (class(x)==numeric){
x2<-x[is.na(x)]<-0
return(x2)}
else{
return(x)
}
}
lapply(training_f,na_to_zero)
a<-'abc'
class(a)
is.character(a)
na_to_zero<-function(x){
if (is.numeric(x)){
x2<-x[is.na(x)]<-0
return(x2)}
else{
return(x)
}
}
lapply(training_f,na_to_zero)
na_to_zero<-function(x){
if (is.numeric(x)){
x[is.na(x)]<-0
return(x)}
else{
return(x)
}
}
lapply(training_f,na_to_zero)
na_to_zero<-function(x){
if (is.numeric(x)){
x[is.na(x)]<-0
return(x)}
else{
return(x)
}
}
tmp<-lapply(training_f,na_to_zero)
class(tmp)
na_to_zero<-function(x){
if (is.numeric(x)){
x[is.na(x)]<-0
return(x)}
else{
return(x)
}
}
tmp<-as.data.frame(lapply(training_f,na_to_zero))
tmp
str(tmp)
train_df<-as.data.frame(lapply(training_f,na_to_zero))
val_df<-as.data.frame(lapply(validation_f,na_to_zero))
train_df<-as.data.frame(lapply(training_f,na_to_zero))
val_df<-as.data.frame(lapply(validation_f,na_to_zero))
ctrl<-trainControl(method='repeatedcv',repeats = 2,number=10)
glm.fit<-train(Survived ~ .,data=train_df,method='glm',trControl=ctrl,
tuneLength=10)
glm.val<-predict(glm.fit,val_df)
glm.rmse=rmse(glm.val,val_df$Survived)
sapply(testing_p,function(x) mean(is.na(x)))
glm.val
length(glm.val)
length(val_df$Survived)
gly.accu<-mean(glm.val==val_df$Survived)
gly.accu
glm.accu<-mean(glm.val==val_df$Survived)
svm.fit<-train(Survived ~.,data=train_df,
method='svmRadial',
trControl = ctrl,
tuneLength=10,
na.action = na.pass)
svm.val<-predict(svm.fit,val_df)
svm.accu<-mean(svm.val==val_df$Survived)
rf.fit<-svm.fit<-train(Survived ~.,data=train_df,
method='rf',
trControl = ctrl,
tuneLength=10,
na.action = na.pass)
rf.val<-predict(rf.fit,val_df)
rf.accu<-mean(rf.val==val_df$Survived)
lda.fit<-train(Survived ~.,data=train_df,
method='lda'
trControl=ctrl,
tuneLength=5,
na.action=na.pass)
lda.fit<-train(Survived ~.,data=train_df,
method='lda',
trControl=ctrl,
tuneLength=5,
na.action=na.pass)
lda.val<-predict(lda.fit,val_df)
lda.accu<-mean(lda.val==val_df$Survived)
model_compile<-data.frame(glm=glm.val,rf=rf.val,lda=lda.val,svm=svm.val,
Survived=val_df$Survived)
model_compile
library(tidyverse);library(caret);library(modelr)
library(ModelMetrics)
train_set<-read.csv('../data/train.csv')
test_set<-read.csv('../data/test.csv')
training<-train_set %>% select(-PassengerId,-Name,-Ticket,-Cabin) %>%
mutate(Survived=as.factor(Survived),Pclass=as.factor(Pclass))
testing<-test_set %>% select(-PassengerId,-Name,-Ticket,-Cabin) %>%
mutate(Pclass = as.factor(Pclass))
training_presplit<-train_set %>% select(-PassengerId,-Name,-Ticket,-Cabin) %>%
mutate(Survived=as.factor(Survived),Pclass=as.factor(Pclass))
testing<-test_set %>% select(-PassengerId,-Name,-Ticket,-Cabin) %>%
mutate(Pclass = as.factor(Pclass))
in_train<-createDataPartition(training_presplit$Survived,p=0.8,list=FALSE)
training<-training_presplit[in_train,]
validation<-training_presplit[-in_train,]
names(training)
preprocess.mod<-preProcess(training[-1],method=c('center','scale','BoxCox'))
training_processed<-predict(preprocess.mod,training[-1])
validation_processed<-predict(preprocess.mod,validation[-1])
testing_processed<-predict(preprocess.mod,testing)
training_full<-cbind(Survived=training$Survived,training_processed)
validation_full<-cbind(Survived=validation$Survived,validation_processed)
na_to_zero<-function(x){
if (is.numeric(x)){
x[is.na(x)]<-0
return(x)}
else{
return(x)
na_to_zero<-function(x){
if (is.numeric(x)){
x[is.na(x)]<-0
return(x)}
else{
return(x)
}
}
train_df<-as.data.frame(lapply(training_full,na_to_zero))
val_df<-as.data.frame(lapply(validation_full,na_to_zero))
glm.fit<-train(Survived ~ .,data=train_df,method='glm',trControl=ctrl,
tuneLength=10)
glm.pred<-predict(glm.fit,val_df)
glm.accu<-mean(glm.pred==val_df$Survived)
ctrl<-trainControl(method='repeatedcv',repeats = 2,number=10)
glm.fit<-train(Survived ~ .,data=train_df,method='glm',trControl=ctrl,
tuneLength=10)
glm.pred<-predict(glm.fit,val_df)
glm.accu<-mean(glm.pred==val_df$Survived)
svm.fit<-train(Survived ~.,data=train_df,
method='svmRadial',
trControl = ctrl,
tuneLength=5,
na.action = na.pass)
svm.pred<-predict(svm.fit,val_df)
svm.accu<-mean(svm.pred==val_df$Survived)
rf.fit<-train(Survived ~.,data=train_df,
method='rf',
trControl = ctrl,
tuneLength=5,
na.action = na.pass)
rf.pred<-predict(rf.fit,val_df)
rf.accu<-mean(rf.pred==val_df$Survived)
lda.fit<-train(Survived ~.,data=train_df,
method='lda',
trControl=ctrl,
tuneLength=5,
na.action=na.pass)
lda.pred<-predict(lda.fit,val_df)
lda.pred<-mean(lda.val==val_df$Survived)
lda.fit<-train(Survived ~.,data=train_df,
method='lda',
trControl=ctrl,
tuneLength=5,
na.action=na.pass)
lda.pred<-predict(lda.fit,val_df)
lda.accu<-mean(lda.pred==val_df$Survived)
val_compile<-data.frame(glm=glm.pred,rf=rf.pred,lda=lda.pred,svm=svm.pred,
Survived=val_df$Survived)
val_compile
create_compile_matrix<-function(df,training_set,target){
ctrl<-trainControl(method='repeatedcv',repeats = 2,number=10)
glm.fit<-train(target ~ .,data=training_set,
method='glm',
trControl=ctrl,
tuneLength=5)
glm.pred<-predict(glm.fit,df)
svm.fit<-train(target ~.,data=training_set,
method='svmRadial',
trControl = ctrl,
tuneLength=5,
na.action = na.pass)
svm.pred<-predict(svm.fit,df)
rf.fit<-train(target ~.,data=training_set,
method='rf',
trControl = ctrl,
tuneLength=5,
na.action = na.pass)
rf.pred<-predict(rf.fit,df)
lda.fit<-train(target ~.,data=training_set,
method='lda',
trControl=ctrl,
tuneLength=5,
na.action=na.pass)
lda.pred<-predict(lda.fit,df)
output<-data.frame(glm=glm.pred,svm=svm.pred,
rf=rf.pred,lda=lda.pred)
}
create_compile_matrix<-function(df,training_set,target){
ctrl<-trainControl(method='repeatedcv',repeats = 2,number=10)
glm.fit<-train(target ~ .,data=training_set,
method='glm',
trControl=ctrl,
tuneLength=5)
glm.pred<-predict(glm.fit,df)
svm.fit<-train(target ~.,data=training_set,
method='svmRadial',
trControl = ctrl,
tuneLength=5,
na.action = na.pass)
svm.pred<-predict(svm.fit,df)
rf.fit<-train(target ~.,data=training_set,
method='rf',
trControl = ctrl,
tuneLength=5,
na.action = na.pass)
rf.pred<-predict(rf.fit,df)
lda.fit<-train(target ~.,data=training_set,
method='lda',
trControl=ctrl,
tuneLength=5,
na.action=na.pass)
lda.pred<-predict(lda.fit,df)
output<-data.frame(glm=glm.pred,svm=svm.pred,
rf=rf.pred,lda=lda.pred)
output
}
create_compile_matrix(val_df,traing_df,Survived)
create_compile_matrix(val_df,train_df,Survived)
create_compile_matrix(val_df,train_df,'Survived')
map
?map
?walk
lda.fit<-train('Survived' ~.,data=train_df,
method='lda',
trControl=ctrl,
tuneLength=5,
na.action=na.pass)
walk('good')
lda.fit<-train(train_df[['Survived']] ~.,data=train_df,
method='lda',
trControl=ctrl,
tuneLength=5,
na.action=na.pass)
lda.pred<-predict(lda.fit,val_df)
lda.accu<-mean(lda.pred==val_df$Survived)
lda.fit<-train(Survived ~.,data=train_df,
method='lda',
trControl=ctrl,
tuneLength=5,
na.action=na.pass)
lda.pred<-predict(lda.fit,val_df)
lda.accu<-mean(lda.pred==val_df$Survived)
rf.fit<-train(train_df[['Survived']] ~.,data=train_df,
method='rf',
trControl = ctrl,
tuneLength=5,
na.action = na.pass)
rf.fit<-train(Survived ~.,data=train_df,
method='rf',
trControl = ctrl,
tuneLength=5,
na.action = na.pass)
eval(substitute('a'))
substitute('a')
deparse(a)
deparse('a')
create_compile_matrix<-function(df,training_set){
ctrl<-trainControl(method='repeatedcv',repeats = 2,number=10)
glm.fit<-train(Survived ~ .,data=training_set,
method='glm',
trControl=ctrl,
tuneLength=5)
glm.pred<-predict(glm.fit,df)
svm.fit<-train(Survived ~.,data=training_set,
method='svmRadial',
trControl = ctrl,
tuneLength=5,
na.action = na.pass)
svm.pred<-predict(svm.fit,df)
rf.fit<-train(Survived ~.,data=training_set,
method='rf',
trControl = ctrl,
tuneLength=5,
na.action = na.pass)
rf.pred<-predict(rf.fit,df)
lda.fit<-train(Survived ~.,data=training_set,
method='lda',
trControl=ctrl,
tuneLength=5,
na.action=na.pass)
lda.pred<-predict(lda.fit,df)
output<-data.frame(glm=glm.pred,svm=svm.pred,
rf=rf.pred,lda=lda.pred)
output
}
create_compile_matrix(val_df,train_df)
train_compile=create_compile_matrix(train_df,train_df)
train_compile<-cbind(train_compile,train_df$Survived)
train_compile
train_compile<-cbind(train_compile,Survived=train_df$Survived)
compile.fit<-train(Survived~., train_compile,
method='svmRadial',
trControl=ctrl,
tuenLength=5,
na.action=na.pass)
val_compile<-create_compile_matrix(val_df,train_df)
compile.pred<-predict(compile.fit,val_compile)
val_compile
compile.pred<-predict(compile.fit,val_compile)
compile.fit<-train(Survived~., train_compile,
method='svmRadial',
trControl=ctrl,
tuenLength=5,
na.action=na.pass)
train_compile
rm(train_compile)
val_compile
train_compile=create_compile_matrix(train_df,train_df)
train_compile
train_compile<-cbind(train_compile,Survived=train_df$Survived)
train_compile
compile.fit<-train(Survived~., train_compile,
method='svmRadial',
trControl=ctrl,
tuenLength=5,
na.action=na.pass)
compile.pred<-predict(compile.fit,val_compile)
compile.accu<-mean(compile.pred==val_df$Survived)
val_compile<-create_compile_matrix(val_df,train_df)
train_compile=create_compile_matrix(train_df,train_df)
train_compile<-cbind(train_compile,Survived=train_df$Survived)
compile.fit<-train(Survived~., train_compile,
method='rf',
trControl=ctrl,
tuenLength=5,
na.action=na.pass)
compile.pred<-predict(compile.fit,val_compile)
compile.accu<-mean(compile.pred==val_df$Survived)
test.pred<-predict(rf.fit,testing_processed)
test.pred
write.csv(test.pred,'titanic_pred.csv')
dim(test.pred)
length(test.pred)
dim(testing)
dim(test_set)
dim(testing_processed)
test.pred<-predict(rf.fit,testing_processed)
len(test.pred)
length(test.pred)
testing_processed
test_df<-as.data.frame(lapply(testing_processed,na_to_zero))
test.pred<-predict(rf.fit,test_df)
length(test.pred)
dim(testing)
outfile<-data.frame(PassengerID=test_set$PassengerId,Survived=test.pred)
write.csv(outfile,'titanic_pred.csv')
write.csv(outfile,'titanic_pred.csv')
train_compile
train_set<-read.csv('../data/train.csv')
test_set<-read.csv('../data/test.csv')
age_missing<-is.na(train_set$Age)
age_missing
age_missing<-as.numeric(is.na(train_set$Age))
age_missing
age_missing==train_set$Survived
sum(age_missing==1 & train_set$Survived)/length(age_missing)
cor(age_missing,train_set$Survived)
?cor
gbm.fit<-train(Survived ~ .,data=train_df,method='gbm',trControl=ctrl,
tuneLength=10)
gbm.pred<-predict(gbm.fit,val_df)
gbm.accu<-mean(gbm.pred==val_df$Survived)
gbm.fit<-train(Survived ~ .,data=train_df,method='gbm',trControl=ctrl,
tuneLength=10)
library(tidyverse);library(caret);library(modelr)
library(ModelMetrics)
train_set<-read.csv('../data/train.csv')
test_set<-read.csv('../data/test.csv')
training_presplit<-train_set %>% select(-PassengerId,-Name,-Ticket,-Cabin) %>%
mutate(Survived=as.factor(Survived),Pclass=as.factor(Pclass))
testing<-test_set %>% select(-PassengerId,-Name,-Ticket,-Cabin) %>%
mutate(Pclass = as.factor(Pclass))
in_train<-createDataPartition(training_presplit$Survived,p=0.8,list=FALSE)
training<-training_presplit[in_train,]
validation<-training_presplit[-in_train,]
preprocess.mod<-preProcess(training[-1],method=c('center','scale','BoxCox'))
training_processed<-predict(preprocess.mod,training[-1])
validation_processed<-predict(preprocess.mod,validation[-1])
testing_processed<-predict(preprocess.mod,testing)
training_full<-cbind(Survived=training$Survived,training_processed)
validation_full<-cbind(Survived=validation$Survived,validation_processed)
# sapply(training_f,function(x) mean(is.na(x)))
na_to_zero<-function(x){
if (is.numeric(x)){
x[is.na(x)]<-0
return(x)}
else{
return(x)
}
}
train_df<-as.data.frame(lapply(training_full,na_to_zero))
val_df<-as.data.frame(lapply(validation_full,na_to_zero))
test_df<-as.data.frame(lapply(testing_processed,na_to_zero))
ctrl<-trainControl(method='repeatedcv',repeats = 2,number=10)
glm.fit<-train(Survived ~ .,data=train_df,method='glm',trControl=ctrl,
tuneLength=10)
glm.pred<-predict(glm.fit,val_df)
glm.accu<-mean(glm.pred==val_df$Survived)
glm.accu
gbm.fit<-train(Survived ~ .,data=train_df,method='gbm',trControl=ctrl,
tuneLength=10)
gbm.pred<-predict(gbm.fit,val_df)
gbm.accu<-mean(gbm.pred==val_df$Survived)
rf.fit<-train(Survived ~.,data=train_df,
method='rf',
trControl = ctrl,
tuneLength=5,
na.action = na.pass)
rf.pred<-predict(rf.fit,val_df)
rf.accu<-mean(rf.pred==val_df$Survived)
rf.fit<-train(Survived ~.,data=train_df,
method='rf',
trControl = ctrl,
tuneLength=9,
na.action = na.pass)
rf.pred<-predict(rf.fit,val_df)
rf.accu<-mean(rf.pred==val_df$Survived)
mean(train_set$Survived)
lm.fit<-train(Survived~.,data=train_df,method='lm',trControl=ctrl,
tuneLenth=10)
train_df
create_compile_matrix<-function(df,training_set){
ctrl<-trainControl(method='repeatedcv',repeats = 2,number=10)
glm.fit<-train(Survived ~ .,data=training_set,
method='glm',
trControl=ctrl,
tuneLength=5)
glm.pred<-predict(glm.fit,df)
svm.fit<-train(Survived ~.,data=training_set,
method='svmRadial',
trControl = ctrl,
tuneLength=5,
na.action = na.pass)
svm.pred<-predict(svm.fit,df)
rf.fit<-train(Survived ~.,data=training_set,
method='rf',
trControl = ctrl,
tuneLength=5,
na.action = na.pass)
rf.pred<-predict(rf.fit,df)
lda.fit<-train(Survived ~.,data=training_set,
method='lda',
trControl=ctrl,
tuneLength=5,
na.action=na.pass)
lda.pred<-predict(lda.fit,df)
output<-data.frame(glm=glm.pred,svm=svm.pred,
rf=rf.pred,lda=lda.pred)
output
}
train_compile=create_compile_matrix(train_df,train_df)
train_compile<-cbind(train_compile,train_df)
compile.fit<-train(Survived~., train_compile,
method='rf',
trControl=ctrl,
tuenLength=5,
na.action=na.pass)
val_compile<-create_compile_matrix(val_df,train_df)
val_compile<-cbind(val_combine,val_df)
val_compile<-cbind(val_compile,val_df)
compile.pred<-predict(compile.fit,val_compile)
compile.accu<-mean(compile.pred==val_df$Survived)
test_compile<-create_compile_matrix(test_df,train_df)
test.pred<-predict(compile.fit,test_df)
test_compile
cbind
test_compile<-cbind(test_compile,test_df)
test_compile
test.pred<-predict(compile.fit,test_compile)
outfile<-data.frame(PassengerID=test_set$PassengerId,Survived=test.pred)
write.csv(outfile,'titanic_pred.csv')
outfile
