{
    "collab_server" : "",
    "contents" : "library(tidyverse);library(caret);library(modelr)\nlibrary(ModelMetrics)\ntrain_set<-read.csv('../data/train.csv')\ntest_set<-read.csv('../data/test.csv')\n\ntraining_presplit<-train_set %>% select(-PassengerId,-Name,-Ticket,-Cabin) %>%\n        mutate(Survived=as.factor(Survived),Pclass=as.factor(Pclass))\ntesting<-test_set %>% select(-PassengerId,-Name,-Ticket,-Cabin) %>% \n        mutate(Pclass = as.factor(Pclass))\n\nin_train<-createDataPartition(training_presplit$Survived,p=0.8,list=FALSE)\ntraining<-training_presplit[in_train,]\nvalidation<-training_presplit[-in_train,]\n\npreprocess.mod<-preProcess(training[-1],method=c('center','scale','BoxCox'))\ntraining_processed<-predict(preprocess.mod,training[-1])\nvalidation_processed<-predict(preprocess.mod,validation[-1])\ntesting_processed<-predict(preprocess.mod,testing)\ntraining_full<-cbind(Survived=training$Survived,training_processed)\nvalidation_full<-cbind(Survived=validation$Survived,validation_processed)\n\n# sapply(training_f,function(x) mean(is.na(x)))\nna_to_zero<-function(x){\n        if (is.numeric(x)){\n                x[is.na(x)]<-0\n                return(x)}\n        else{\n                return(x)\n        }\n}\ntrain_df<-as.data.frame(lapply(training_full,na_to_zero))\nval_df<-as.data.frame(lapply(validation_full,na_to_zero))\ntest_df<-as.data.frame(lapply(testing_processed,na_to_zero))\n# sapply(training_f,function(x) mean(is.na(x)))\n\nctrl<-trainControl(method='repeatedcv',repeats = 2,number=10)\n\n# nearZeroVar(training_f,saveMetrics = TRUE)\n\n### logistic regression\nglm.fit<-train(Survived ~ .,data=train_df,method='glm',trControl=ctrl,\n               tuneLength=10)\nglm.pred<-predict(glm.fit,val_df)\nglm.accu<-mean(glm.pred==val_df$Survived)\n\n##gbm\n\ngbm.fit<-train(Survived ~ .,data=train_df,method='gbm',trControl=ctrl,\n               tuneLength=10,trace=FALSE)\ngbm.pred<-predict(gbm.fit,val_df)\ngbm.accu<-mean(gbm.pred==val_df$Survived)\n### svm\nsvm.fit<-train(Survived ~.,data=train_df,\n               method='svmRadial',\n               trControl = ctrl,\n               tuneLength=5,\n               na.action = na.pass)\nsvm.pred<-predict(svm.fit,val_df)\nsvm.accu<-mean(svm.pred==val_df$Survived)\n\n\n### rf\nrf.fit<-train(Survived ~.,data=train_df,\n                       method='rf',\n                       trControl = ctrl,\n                       tuneLength=9,\n                       na.action = na.pass)\nrf.pred<-predict(rf.fit,val_df)\nrf.accu<-mean(rf.pred==val_df$Survived)\n\n### lda\nlda.fit<-train(Survived ~.,data=train_df,\n               method='lda',\n               trControl=ctrl,\n               tuneLength=5,\n               na.action=na.pass)\nlda.pred<-predict(lda.fit,val_df)\nlda.accu<-mean(lda.pred==val_df$Survived)\n\nval_compile<-data.frame(glm=glm.pred,rf=rf.pred,lda=lda.pred,svm=svm.pred,\n                          Survived=val_df$Survived)\n\ncreate_compile_matrix<-function(df,training_set){\n        ctrl<-trainControl(method='repeatedcv',repeats = 2,number=10)\n        glm.fit<-train(Survived ~ .,data=training_set,\n                       method='glm',\n                       trControl=ctrl,\n                       tuneLength=5)\n        glm.pred<-predict(glm.fit,df)\n        \n        svm.fit<-train(Survived ~.,data=training_set,\n                       method='svmRadial',\n                       trControl = ctrl,\n                       tuneLength=5,\n                       na.action = na.pass)\n        svm.pred<-predict(svm.fit,df)\n        \n        rf.fit<-train(Survived ~.,data=training_set,\n                      method='rf',\n                      trControl = ctrl,\n                      tuneLength=5,\n                      na.action = na.pass)\n        rf.pred<-predict(rf.fit,df)\n        \n        lda.fit<-train(Survived ~.,data=training_set,\n                       method='lda',\n                       trControl=ctrl,\n                       tuneLength=5,\n                       na.action=na.pass)\n        lda.pred<-predict(lda.fit,df)\n        \n        output<-data.frame(glm=glm.pred,svm=svm.pred,\n                           rf=rf.pred,lda=lda.pred)\n        output\n}\n\ntrain_compile=create_compile_matrix(train_df,train_df)\ntrain_compile<-cbind(train_compile,train_df)\ncompile.fit<-train(Survived~., train_compile,\n                   method='rf',\n                   trControl=ctrl,\n                   tuenLength=5,\n                   na.action=na.pass)\nval_compile<-create_compile_matrix(val_df,train_df)\nval_compile<-cbind(val_compile,val_df)\ncompile.pred<-predict(compile.fit,val_compile)\ncompile.accu<-mean(compile.pred==val_df$Survived)\n\ntest_compile<-create_compile_matrix(test_df,train_df)\ntest_compile<-cbind(test_compile,test_df)\n\ntest.pred<-predict(compile.fit,test_compile)\noutfile<-data.frame(PassengerID=test_set$PassengerId,Survived=test.pred)\nwrite.csv(outfile,'titanic_pred.csv')\n\n",
    "created" : 1499123912162.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3271139961",
    "id" : "223614FB",
    "lastKnownWriteTime" : 1499211498,
    "last_content_update" : 1499211498958,
    "path" : "C:/Users/miluo/Kaggle/Titanic/Titanic_R/titanic_r.R",
    "project_path" : "titanic_r.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}