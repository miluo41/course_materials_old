library(tidyverse)
source('C:/Users/miluo/Kaggle/Titanic/TrevorTutorial/trevor_tutorial.R', echo=TRUE)
summary(training$Sex)
table(training$Sex)
table(training$Sex,training$Survived)
?prop.table
prop.table(table(training$Sex,training$Survived))
prop.table(table(training$Sex,training$Survived),1)
prop.table(table(training$Sex,training$Survived),2)
dim(testing)
testing$Survivial<-rep(0,dim(testing)[1])
testing
unique(testing$Sex)
testing$Survivial[testing$Sex==female]
testing$Survivial[testing$Sex=='female']<-1
testing
?write.csv
names(training)
df<-data.frame(PassengerId=testing$PassengerId,Survived=testing$Survivial,row.names = FALSE)
vived=testing$Survivial)
write.csv(df,'gender_model.csv',row.names = FALSE)
df<-data.frame(PassengerId=testing$PassengerId,Survived=testing$Survivial)
write.csv(df,'gender_model.csv',row.names = FALSE)
summary(training$Age)
training$Child<-0
training$Child[training$Age<18]<-1
names(training)
aggregate(Survived ~ Child + Sex, data=training)
?aggregate
aggregate(Survived ~ Child + Sex, data=training,FUN=sum)
aggregate(Survived ~ Child + Sec, data=training,Fun=length)
aggregate(Survived ~ Child + Sex, data=training, Fun=length)
aggregate(Survived ~ Child + Sex, data=training, Fun=length)
aggregate(Survived ~ Child + Sex, data=training, FUN=length)
aggregate(Survived ~ Child + Sex, data=training, FUN=mean)
aggregate(Survived ~ Child + Sex, data=training, FUN=function(x){sum(x)/length(x)})
names(training)
training$Fare
class(training$Fare)
range(training$Fare)
summary(training$Fare)
training$Fare2<-'30+'
training$Fare2[training$Fare>20 & training$Fare<=30]<-'20-30'
training$Fare2[training$Fare>10 & training$Fare<=20]<-'10-20'
training$Fare2[training$Fare<=10]<-'<=10'
training$Fare2
names(training)
aggregate(Survived ~ Sex + Pclass + Fare2, data=training, FUN=mean)
aggregate(Survived ~ Sex + Pclass, data=training, FUN=mean)
aggregate(Survived ~ Sex + Pclass + Sex, data=training, FUN=mean)
aggregate(Survived ~ Sex + Pclass + Sex, data=training, FUN=mean)
aggregate(Survived ~ Fare2 + Pclass + Sex, data=training, FUN=mean)
aggregate(Survived ~ Fare2 + Pclass + Sex, data=training, FUN=function(x){c(mean(x),length(x))})
aggregate(Survived ~ Fare2 + Pclass + Sex, data=training,
FUN=function(x){mean=c(mean(x),count=length(x))})
aggregate(Survived ~ Fare2 + Pclass + Sex, data=training,
FUN=function(x){average=c(mean(x),count=length(x))})
aggregate(Survived ~ Fare2 + Pclass + Sex, data=training,
FUN=function(x){c(mean=mean(x),count=length(x))})
testing$Survivial[testing$Sex=='female']<-1
testing$Survival[testing$Set=='female' & testing$Pclass==3 & testing$Fare>=20]<-0
testing$Survivial<-0
testing$Survivial[testing$Sex=='female']<-1
testing$Survival[testing$Sex=='female' & testing$Pclass==3 & testing$Fare>=20]<-0
names(testing)
df2=data.frame(PassengerId=testing$PassengerId,Survived=testing$Survivial)
df2=data.frame(PassengerId=testing$PassengerId,Survived=testing$Survivial)
write.csv(df2,'gender_class_model.csv',row.names = FALSE)
train=read.csv('../data/train.csv')
test=read.csv('../data/test.csv')
library(rpart)
sapply(training,class)
+ Age + SibSp + Parch + Fare + Embarked,
data=train,method='class')
fit<-rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
data=train, method='class')
plot(fit)
test(fit)
text(fit)
library(rattle)
fancyRpartPlot((fit))
fancyRpartPlot(fit)
fancyRpartPlot(fit)
library(rpart.plot)
fancyRpartPlot(fit)
library(RColorBrewer)
fancyRpartPlot(fit)
fancyRpartPlot(fit)
fancyRpartPlot(fit,cex=3)
fancyRpartPlot(fit,cex=2)
fancyRpartPlot(fit,cex=1)
fancyRpartPlot(fit,cex=0.8)
prediction<-predict(fit,test,type='class')
names(test)
fancyRpartPlot(fit,cex=0.8)
prediction<-predict(fit,test,type='class')
df3<-data.frame(PassengerId=test$PassengerId,Survived=Prediction)
write.csv(df3,'rpart_mod.csv',row.names = FALSE)
prediction<-predict(fit,test,type='class')
df3<-data.frame(PassengerId=test$PassengerId,Survived=prediction)
write.csv(df3,'rpart_mod.csv',row.names = FALSE)
names(train)
test$Survived<-NA
combi<-rbind(train,test)
combi
combi$Name<-as.character(combi$Name)
combi$Name[1]
tmp<-combi$Name[1]
strsplit(tmp,split = [,.])
strsplit(tmp,split = ',.')
strsplit(tmp,split = '[,.]')
strsplit(tmp,split='[,.]')
strsplit(tmp,split='[,.]')[[1]]
strsplit(tmp,split='[,.]')[[1]][1]
strsplit(tmp,split='[,.]')[[1]][2]
combi$Title<-strsplit(combi$Name,split='[,.]'[[1]][2])
combi$Title
combi$Title<-strsplit(combi$Name,split='[,.]')[[1]][2]
combi$Title
combi$Title<-sapply(combi$Name,function(x){strsplit(x,split='[,.]')[[1]][2]})
combi$Title
?sub
combi$Title<-sub(' ','',combi$Title)
combi$Title
table(combi$Title)
combi$Title<-combi$Title[combi$Title %in% c('Mlle','Mme')]<-'Mlle'
table(combi$Title)
combi$Title<-sapply(combi$Name,function(x){strsplit(x,split='[,.]')[[1]][2]})
combi$Title
combi$Title<-sub(' ','',combi$Title)
combi$Title
table(combi$Title)
combi$Title[combi$Title %in% c('Mlle','Mme')]<-'Mlle'
combi$Title
table(combi$Title)
combi$Title[combi$Title %in%  c('Capt', 'Don', 'Major', 'Sir')]<'Sir'
combi$Title[combi$Title %in% c('Dona', 'Lady', 'the Countess', 'Jonkheer')]<-'Lady'
table(combi$Title)
combi$Title[combi$Title %in%  c('Capt', 'Don', 'Major', 'Sir')]<-'Sir'
combi$Title[combi$Title %in% c('Dona', 'Lady', 'the Countess', 'Jonkheer')]<-'Lady'
table(combi$Title)
combi$Title<-as.factor(combi$Title)
type(combi$Title)
class(combi$Title)
combi$family_size<-combi$SibSp+combi$Parch+1
combi$family_size
combi$Surname<-sapply(combi$Name,function(x){strsplit(x,split='[,.]')[[1]][1]})
combi$Surname
'a'+'b'
combi$FamilyId<-paste0(as.character(combi$family_size),combi$Surname)
combi$FamilyId
combi$FamilyId[combi$family_size<=2]<-'small'
table(combi$FamilyId)
famIDs<-table(combi$FamilyId)
famIDs<-data.frame(table(combi$FamilyId))
famIDs
View(famIDs)
famIDs<-famIDs[famIDs$Freq<=2,]
famIDs
combi$FamilyId[combi$FamilyId %in% famIDs$Var1]<-'small'
table(combi$FamilyId)
combi$FamilyId<-as.factor(combi$FamilyId)
train<-combi[1:891,]
test<-combi[892:1309,]
seq(1,5,1)
1:4
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize + FamilyID,
data=train,method = 'class')
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + family_size+ FamilyID,
data=train,method = 'class')
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + family_size+ FamilyId,
data=train,method = 'class')
prediction<-predict(fit,test,type='class')
prediction
train<-read.csv('../data/train.csv')
test<-read.csv('../data/train.csv')
names(combi)
combi[is.na(combi$Age),]$age
combi[is.na(combi$Age),]
combi$Age[is.na(combi$Age)]<-predict(age.fit,combi[is.na(combi$Age),])
age.fit<-rpart(Age ~ class + Sex + SibSp + Parch + Fare + Embarked + Title + FamilySize,
data=combi[!is.na(combi$Age),],method='anova')
combi$Age[is.na(combi$Age)]<-predict(age.fit,combi[is.na(combi$Age),])
age.fit<-rpart(Age ~ class + Sex + SibSp + Parch + Fare + Embarked + Title + family_size,
data=combi[!is.na(combi$Age),],method='anova')
combi$Age[is.na(combi$Age)]<-predict(age.fit,combi[is.na(combi$Age),])
age.fit<-rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Title + family_size,
data=combi[!is.na(combi$Age),],method='anova')
combi$Age[is.na(combi$Age)]<-predict(age.fit,combi[is.na(combi$Age),])
combi
summary(combi)
summary(combi$Age)
which(is.na(combi$Age))
str(combi$Embarked)
which(combi$Embarked=='')
combi$Embarked[which(combi$Embarked=='')]<-'S'
summary(combi$Embarked)
combi$Embarked<-as.factor(combi$Embarked)
summary(combi$Embarked)
summary(combi$Fare)
which(is.na(combi$Fare))
combi$Fare[which(is.na(combi$Fare))]<-median(combi$Fare,na.rm = FALSE)
summary(combi$Fare)
combi$Fare[which(is.na(combi$Fare))]<-median(combi$Fare,na.rm = FALSE)
summary(combi$Fare)
combi$Fare[which(is.na(combi$Fare))]<-median(combi$Fare,na.rm = TRUE)
summary(combi$Fare)
combi$FamilyId2<-as.character(combi$FamilyId)
combi$FamilyId2[combi$family_size<=3]<-'small'
str(combi$FamilyId2)
combi$FamilyId2<-as.factor(combi$FamilyId2)
str(combi$FamilyId2)
unique(combi$FamilyId2)
library(randomForest)
set.seed(415)
train<-combi[1:891,]
test<-combi[892:1309,]
train<-combi[1:891,]
test<-combi[892:1309,]
library(randomForest)
set.seed(415)
rf.fit<-randomForest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare +
Embarked + Title + family_size + FamilyId2,data=train,
importance=TRUE,ntree=2000)
varImpPlot(rf.fit)
library(party)
c.fit<-cforest(as.factor(Survived)~Pclass + Sex + Age + SibSp + Parch + Fare +
Embarked + Title + family_size + FamilyId,
data = train,
controls=cforest_unbiased(ntree=2000, mtry=3))
Prediction <- predict(fit, test, OOB=TRUE, type = "response")
Prediction <- predict(c.fit, test, OOB=TRUE, type = "response")
Prediction
names(test)
df4<-data.frame(PassengerId=test$PassengerId,Survived=Prediction)
write.csv(df4,'cforest.csv',row.names = FALSE)
set.seed(123)
c.fit<-cforest(as.factor(Survived)~Pclass + Sex + Age + SibSp + Parch + Fare +
Embarked + Title + family_size + FamilyId,
data = train,
controls=cforest_unbiased(ntree=2000, mtry=3))
Prediction <- predict(c.fit, test, OOB=TRUE, type = "response")
df4<-data.frame(PassengerId=test$PassengerId,Survived=Prediction)
write.csv(df4,'cforest.csv',row.names = FALSE)
