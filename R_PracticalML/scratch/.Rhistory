library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
source('~/PracticalML/scratch/scratch.R', echo=TRUE)
library(tidyverse)
source('~/PracticalML/scratch/scratch.R', echo=TRUE)
range(training$CompressiveStrength)
source('~/PracticalML/scratch/scratch.R', echo=TRUE)
names(training)
str(training)
unique(training$FlyAsh)
library(Hmisc)
training[-'CompressiveStrength']
training[,-'CompressiveStrength']
subset(training,-c('CompressiveStrength'))
subset(training,- CompressiveStrength)
subset(training,- c(CompressiveStrength))
?subset
subset(training,select=-CompressiveStrength)
training2<-subset(training,select=-CompressiveStrength)
training2<-lapply(training2,cut2,3)
training2
cbind(training2,training$CompressiveStrength)
dim(training2)
class(training2)
training2<-subset(training,select=-CompressiveStrength)
class(training2)
trainiing2<-as.data.frame(lapply(training2,cut2,4))
dim(training2)
dim(training)
training3<-cbind(training2,training$CompressiveStrength)
source('~/PracticalML/scratch/scratch.R', echo=TRUE)
names(training3)
names(training3)[9]<-'CompressiveStrength'
names(training3)
source('~/PracticalML/scratch/scratch.R', echo=TRUE)
source('~/PracticalML/scratch/scratch.R', echo=TRUE)
lapply(training3,class)
training2
training2<-as.data.frame(lapply(training2,cut2,4))
training2
training3<-cbind(traing2,training$CompressiveStrength)
training3<-cbind(training2,training$CompressiveStrength)
names(training3)
names(training3)[9]<-'CompressiveStrength'
source('~/PracticalML/scratch/scratch.R', echo=TRUE)
?cut2
training2<-subset(training,select=-CompressiveStrength)
training2<-as.data.frame(lapply(training2,cut2,g=4))
training3<-cbind(traing2,training$CompressiveStrength)
training3<-cbind(training2,training$CompressiveStrength)
names(training3)[9]<-CompressiveStrength
names(training3)[9]<-'CompressiveStrength'
source('~/PracticalML/scratch/scratch.R', echo=TRUE)
names(training3)
source('~/PracticalML/scratch/scratch.R', echo=TRUE)
source('~/PracticalML/scratch/scratch.R', echo=TRUE)
source('~/PracticalML/scratch/scratch.R', echo=TRUE)
source('~/PracticalML/scratch/scratch.R', echo=TRUE)
source('~/PracticalML/scratch/scratch.R', echo=TRUE)
source('~/PracticalML/scratch/scratch.R', echo=TRUE)
source('~/PracticalML/scratch/scratch.R', echo=TRUE)
source('~/PracticalML/scratch/scratch.R', echo=TRUE)
source('~/PracticalML/scratch/scratch.R', echo=TRUE)
names(training)
source('~/PracticalML/scratch/scratch.R', echo=TRUE)
source('~/PracticalML/scratch/scratch.R', echo=TRUE)
source('~/PracticalML/scratch/scratch.R', echo=TRUE)
lm.fit<-lm(CompressiveStrength ~ Age,data=training)
summary(lm.fit)
lm.fit<-lm(CompressiveStrength~.,data=training)
summary(lm.fit)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
names(training)
hist(training$Superplasticizer)
hist(log(training$Superplasticizer))
hist(log(training$Superplasticizer+1))
dim(training[training$Superplasticizer==0,])
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
str(training)
?select
source('~/PracticalML/scratch/scratch.R', echo=TRUE)
names(training2)
source('~/PracticalML/scratch/scratch.R', echo=TRUE)
dim(training2)
?preProcess
source('~/PracticalML/scratch/scratch.R', echo=TRUE)
source('~/PracticalML/scratch/scratch.R', echo=TRUE)
names(pca.pred)
pca.pred
summary(pca.pred)
summary(pca.pre)
pca.pre
source('~/PracticalML/scratch/scratch.R', echo=TRUE)
pca.pre
source('~/PracticalML/scratch/scratch.R', echo=TRUE)
training2
names(training2)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
source('~/PracticalML/scratch/scratch.R', echo=TRUE)
source('~/PracticalML/scratch/scratch.R', echo=TRUE)
rm(list=ls())
names(training)
source('~/PracticalML/scratch/scratch.R', echo=TRUE)
names(training)
source('~/PracticalML/scratch/scratch.R', echo=TRUE)
source('~/PracticalML/scratch/scratch.R', echo=TRUE)
?train
training[-'diagnosis']
training['diagnosis']
names(training)
subset(training,select=-disgnosis)
source('~/PracticalML/scratch/scratch.R', echo=TRUE)
source('~/PracticalML/scratch/scratch.R', echo=TRUE)
pca.var
source('~/PracticalML/scratch/scratch.R', echo=TRUE)
source('~/PracticalML/scratch/scratch.R', echo=TRUE)
source('~/PracticalML/scratch/scratch.R', echo=TRUE)
source('~/PracticalML/scratch/scratch.R', echo=TRUE)
names(training.pca)
source('~/PracticalML/scratch/scratch.R', echo=TRUE)
source('~/PracticalML/scratch/scratch.R', echo=TRUE)
source('~/PracticalML/scratch/scratch.R', echo=TRUE)
rm(list=ls())
source('~/PracticalML/scratch/scratch.R', echo=TRUE)
warnings()
source('~/PracticalML/scratch/scratch.R', echo=TRUE)
source('~/PracticalML/scratch/scratch.R', echo=TRUE)
warnings()
?trainControl
source('~/PracticalML/scratch/scratch.R', echo=TRUE)
warnings()
source('~/PracticalML/scratch/scratch.R', echo=TRUE)
source('~/PracticalML/scratch/scratch.R', echo=TRUE)
source('~/PracticalML/scratch/scratch.R', echo=TRUE)
source('~/PracticalML/scratch/scratch.R', echo=TRUE)
source('~/PracticalML/scratch/scratch.R', echo=TRUE)
source('~/PracticalML/scratch/quiz2q5.R', echo=TRUE)
source('~/PracticalML/scratch/quiz3.R', echo=TRUE)
source('~/PracticalML/scratch/quiz3.R', echo=TRUE)
source('~/PracticalML/scratch/quiz3.R', echo=TRUE)
?tracemem
?mem_change
?address
adress(seg)
address(seg)
address(segmentationOriginal)
refs(seg)
refs(segmentationOriginal)
source('~/PracticalML/scratch/quiz3.R', echo=TRUE)
?createDataPartition
source('~/PracticalML/scratch/quiz3.R', echo=TRUE)
source('~/PracticalML/scratch/quiz3.R', echo=TRUE)
names(training)
head(Seg$Case)
source('~/PracticalML/scratch/quiz3.R', echo=TRUE)
source('~/PracticalML/scratch/quiz3.R', echo=TRUE)
source('~/PracticalML/scratch/quiz3.R', echo=TRUE)
predict(cart.fit,A)
segmentationOriginal$Case
source('~/PracticalML/scratch/quiz3.R', echo=TRUE)
predict(cart.fit,A)
rm(list=ls())
source('~/PracticalML/scratch/quiz3.R', echo=TRUE)
Seg$Case
source('~/PracticalML/scratch/quiz3.R', echo=TRUE)
source('~/PracticalML/scratch/quiz3.R', echo=TRUE)
cart.fit
names(cart.fit)
source('~/PracticalML/scratch/quiz3.R', echo=TRUE)
library(rattle)
rattle()
library(rattle)
fancyRpartPlot(cart.fit$finalModel)
plot(cart.fit$finalModel)
plot(cart.fit$finalModel,uniform = T)
plot(cart.fit$finalModel)
plot(cart.fit$finalModel,uniform = T)
text(cart.fit$finalModel)
text(cart.fit$finalModel,cex=0.3)
fancyRpartPlot(cart.fit$finalModel)
rm(list=ls())
install.packages('pgmm')
library(pgmm)
data(olive)
olive = olive[,-1]
str(olif)
str(olive)
iris
rf.fit<-train(Species ~.,data=iris,method='rf',proxy=TRUE)
rf.fit
?getTree
getTree(rf.fit$finalModel,k=2)
rf.fit<-train(Species ~.,data=iris,method='rf',prox=TRUE)
?classCenter
olive$Area
class(olive$Area)
library(tidyverse)
source('~/PracticalML/scratch/quiz3.R', echo=TRUE)
rm(rf.fit)
source('~/PracticalML/scratch/quiz3.R', echo=TRUE)
newdata = as.data.frame(t(colMeans(olive)))
source('~/PracticalML/scratch/quiz3.R', echo=TRUE)
olive
data(olive)
rm(rf.fit)
source('~/PracticalML/scratch/quiz3.R', echo=TRUE)
source('~/PracticalML/scratch/quiz3.R', echo=TRUE)
rm(list=ls())
install.packages('ElemStatLearn')
source('~/PracticalML/scratch/quiz3.R', echo=TRUE)
names(train)
names(trainSA)
source('~/PracticalML/scratch/quiz3.R', echo=TRUE)
trainSA
?train
?train.glm
source('~/PracticalML/scratch/quiz3.R', echo=TRUE)
source('~/PracticalML/scratch/quiz3.R', echo=TRUE)
source('~/PracticalML/scratch/quiz3.R', echo=TRUE)
source('~/PracticalML/scratch/quiz3.R', echo=TRUE)
source('~/PracticalML/scratch/quiz3.R', echo=TRUE)
source('~/PracticalML/scratch/quiz3.R', echo=TRUE)
source('~/PracticalML/scratch/quiz3.R', echo=TRUE)
source('~/PracticalML/scratch/quiz3.R', echo=TRUE)
rm(list=ls())
source('~/PracticalML/scratch/quiz3.R', echo=TRUE)
str(vowel.train)
?varlamp
?varlmp
library(randomForest)
?varImp
?randomForest
source('~/PracticalML/scratch/quiz3.R', echo=TRUE)
varImp(rf.caret)
varImp(rf.rf)
rf.caret
rf.rf2<-randomForest(y~.,data=vowel.train,mtry=2)
varImp(rf.rf2)
source('~/PracticalML/scratch/quiz4.R', echo=TRUE)
names(vowel.train)
source('~/PracticalML/scratch/quiz4.R', echo=TRUE)
head(testing)
source('~/PracticalML/scratch/quiz4.R', echo=TRUE)
conf.rf
conf.gbm
names(conf.rf)
conf.rf$overall
conf.gbm$overall
testing$y
rownames(rf.pred)
seq_len(5)
source('~/PracticalML/scratch/quiz4.R', echo=TRUE)
testing2
rf.pred
source('~/PracticalML/scratch/quiz4.R', echo=TRUE)
source('~/PracticalML/scratch/quiz4.R', echo=TRUE)
rf.pred
nrow(rf.pred)
source('~/PracticalML/scratch/quiz4.R', echo=TRUE)
rf.pred2
source('~/PracticalML/scratch/quiz4.R', echo=TRUE)
source('~/PracticalML/scratch/quiz4.R', echo=TRUE)
source('~/PracticalML/scratch/quiz4.R', echo=TRUE)
agree$y
agree
source('~/PracticalML/scratch/quiz4.R', echo=TRUE)
testing2
source('~/PracticalML/scratch/quiz4.R', echo=TRUE)
agree
rf.pred$y==gbm.pred$y
rf.pred$y
names(rf.pred)
source('~/PracticalML/scratch/quiz4.R', echo=TRUE)
?predict
names(rf.pred)
source('~/PracticalML/scratch/quiz4.R', echo=TRUE)
agree
source('~/PracticalML/scratch/quiz4.R', echo=TRUE)
dim(agree)
names(agree)
dim(testing_agree)
dim(testing2)
source('~/PracticalML/scratch/quiz4.R', echo=TRUE)
dim(testing_agree)
dim(agree)
source('~/PracticalML/scratch/quiz4.R', echo=TRUE)
conf.agree
conf.rf
conf.rf$overall
class(conf.rf$overall)
is.list(conf.rf$overall)
typeof(conf.rf$overall)
conf.rf$overall[[1]]
conf.gbm$overall[[1]]
conf.agree$overall[[1]]
rm(list=ls())
source('~/PracticalML/scratch/quiz4.R', echo=TRUE)
rm(list=ls())
source('~/PracticalML/scratch/quiz4.R', echo=TRUE)
source('~/PracticalML/scratch/quiz4.R', echo=TRUE)
conf.agree$overall[[1]]
conf.rf$overall[[1]]
conf.gbm$overall[[1]]
rm(list=ls())
source('~/PracticalML/scratch/quiz4.R', echo=TRUE)
source('~/PracticalML/scratch/quiz4.R', echo=TRUE)
source('~/PracticalML/scratch/quiz4.R', echo=TRUE)
comb
lda.accu
rf.accu
gbm.accu
source('~/PracticalML/scratch/quiz4.R', echo=TRUE)
dim(rf.pred)
length(rf.pred)
length(gbm.pred)
length(lda.pred)
length(testing$diagnosis)
source('~/PracticalML/scratch/quiz4.R', echo=TRUE)
source('~/PracticalML/scratch/quiz4.R', echo=TRUE)
source('~/PracticalML/scratch/quiz4.R', echo=TRUE)
comb.accu
rf.accu
lda.accu
gbm.accu
rm(list=ls())
source('~/PracticalML/scratch/quiz4.R', echo=TRUE)
?plot.enet
library(glmnet)
?plot.enet
?trainControl
library(elasticnet)
install.packages('elasticnet')
library(elasticnet)
names(training)
source('~/PracticalML/scratch/quiz4.R', echo=TRUE)
plot.enet(lasso.fit)
?plot.enet
source('~/PracticalML/scratch/quiz4.R', echo=TRUE)
names(diabetes)
?enet
source('~/PracticalML/scratch/quiz4.R', echo=TRUE)
?enet
names(training)
source('~/PracticalML/scratch/quiz4.R', echo=TRUE)
source('~/PracticalML/scratch/quiz4.R', echo=TRUE)
source('~/PracticalML/scratch/quiz4.R', echo=TRUE)
names(training)
source('~/PracticalML/scratch/quiz4.R', echo=TRUE)
lasso.x
names(lasso.x)
source('~/PracticalML/scratch/quiz4.R', echo=TRUE)
source('~/PracticalML/scratch/quiz4.R', echo=TRUE)
lasso.x
dim(lasso.x)
source('~/PracticalML/scratch/quiz4.R', echo=TRUE)
plot(lasso.fit)
names(lasso.fit)
lasso.fit$a0
lasso.fit
summary(lasso.fit)
coef(lasso.fit)
coef(lasso.fit)[1]
lasso.fit$lambda[1]
lasso.fit$lambda[50]
lasso.fit$lambda[0.1]
dim(coef(lasso.fit))
coef(lasso.fit)[1]
coef(lasso.fit)[[1]]
coef(lasso.fit)[1,]
coef(lasso.fit)[1,]
coef(lasso.fit)[,1]
coef(lasso.fit)[,100]
coef(lasso.fit)[,10]
coef(lasso.fit)[,20]
coef(lasso.fit)[,30]
coef(lasso.fit)[,40]
coef(lasso.fit)[,50]
coef(lasso.fit)[,80]
coef(lasso.fit)[,75]
coef(lasso.fit)[,76]
coef(lasso.fit)[,77]
coef(lasso.fit)[,76]
coef(lasso.fit)[,1]
lasso.fit$beta
df<-read_csv('q4.csv')
df
dat<-read_csv('q4.csv')
rm(list=ls())
source('~/PracticalML/scratch/quiz4.R', echo=TRUE)
source('~/PracticalML/scratch/quiz4.R', echo=TRUE)
source('~/PracticalML/scratch/quiz4.R', echo=TRUE)
dat
source('~/PracticalML/scratch/quiz4.R', echo=TRUE)
source('~/PracticalML/scratch/quiz4.R', echo=TRUE)
dat$date
?read_csv
head(dat)
unique(dat$visitsTumblr)
source('~/PracticalML/scratch/quiz4.R', echo=TRUE)
source('~/PracticalML/scratch/quiz4.R', echo=TRUE)
head(dat)
source('~/PracticalML/scratch/quiz4.R', echo=TRUE)
str(dat)
source('~/PracticalML/scratch/quiz4.R', echo=TRUE)
dat
source('~/PracticalML/scratch/quiz4.R', echo=TRUE)
dat
source('~/PracticalML/scratch/quiz4.R', echo=TRUE)
str(dat)
source('~/PracticalML/scratch/quiz4.R', echo=TRUE)
rm(list=ls())
source('~/PracticalML/scratch/quiz4.R', echo=TRUE)
library(e1071)
?svm
?rmse
names(training)
source('~/PracticalML/scratch/quiz4.R', echo=TRUE)
rmse(testing$CompressiveStrength,svm.pred)
library(ModelMetrics)
rmse(testing$CompressiveStrength,svm.pred)
install.packages('bats')
library(bats)
library(forecast)
install.packages('forecast')
library(forecast)
?bats
?ts
?bats
?ma
?bats
source('~/PracticalML/scratch/quiz4.R', echo=TRUE)
source('~/PracticalML/scratch/quiz4.R', echo=TRUE)
source('~/PracticalML/scratch/quiz4.R', echo=TRUE)
source('~/PracticalML/scratch/quiz4.R', echo=TRUE)
source('~/PracticalML/scratch/quiz4.R', echo=TRUE)
#accuracy(bats.pred,testing$visitsTumblr)
accuracy(bats.pred,testing$visitsTumblr)
?accuracy
tstrain
source('~/PracticalML/scratch/quiz4.R', echo=TRUE)
source('~/PracticalML/scratch/quiz4.R', echo=TRUE)
